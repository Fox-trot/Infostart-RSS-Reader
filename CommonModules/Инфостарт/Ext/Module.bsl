
Функция КаналДефолт() Экспорт
	Возврат Справочники.Каналы.Инфостарт;
КонецФункции

Функция ДатаПреобразовать(Знач Слово)
	Сдвиг = 0;
	Если Найти(Слово, "+") > 0 Тогда
		Попытка
			Сдвиг = Число(Сред(Слово, Найти(Слово, "+") + 1));
			Слово = Лев(Слово, Найти(Слово, "+") - 1);
		Исключение
			Сдвиг = 0;
		КонецПопытки;
	ИначеЕсли Найти(Слово, "-") > 0 Тогда
		Попытка
			Сдвиг = - Число(Сред(Слово, Найти(Слово, "-") + 1));
			Слово = Лев(Слово, Найти(Слово, "-") - 1);
		Исключение
			Сдвиг = 0;
		КонецПопытки;
	КонецЕсли;
	День	= "";
	Месяц	= Формат(Месяц(ТекущаяДата()), "ЧЦ=2; ЧВН=");
	Год		= Формат(Год(ТекущаяДата()), "ЧЦ=4; ЧВН=");
	Время	= "";
	Кондуит = Новый Массив;
	Кондуит.Добавить(", ");
	Кондуит.Добавить("Sun");
	Кондуит.Добавить("Mon");
	Кондуит.Добавить("Tue");
	Кондуит.Добавить("Wed");
	Кондуит.Добавить("Thu");
	Кондуит.Добавить("Fri");
	Кондуит.Добавить("Sat");
	Для Каждого тЭлемент Из Кондуит Цикл
		Слово = СтрЗаменить(Слово, тЭлемент, "");
	КонецЦикла;
	
	День = Формат(Лев(Слово, 2), "ЧЦ=2; ЧВН=");
	Если НЕ ПустаяСтрока(День) Тогда
		Слово = СокрЛП(Сред(Слово, Найти(Слово, " ")));

		Кондуит.Очистить();
		Кондуит.Добавить("Jan");
		Кондуит.Добавить("Feb");
		Кондуит.Добавить("Mar");
		Кондуит.Добавить("Apr");
		Кондуит.Добавить("May");
		Кондуит.Добавить("Jun");
		Кондуит.Добавить("Jul");
		Кондуит.Добавить("Aug");
		Кондуит.Добавить("Sep");
		Кондуит.Добавить("Oct");
		Кондуит.Добавить("Nov");
		Кондуит.Добавить("Dec");
		
		Для Каждого тЭлемент Из Кондуит Цикл
			Если Найти(Слово, тЭлемент) > 0 Тогда
				Месяц	= Формат(Кондуит.Найти(тЭлемент) + 1, "ЧЦ=2; ЧВН=");
				Год		= Лев(СокрЛП(Сред(Слово, Найти(Слово, тЭлемент) + 4)), 4);
				Если Найти(Слово, ":") > 0 Тогда
					Время	= СокрЛП(СтрЗаменить(Сред(Слово, Найти(Слово, ":") - 2), ":", ""));
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Попытка
		Дата = Дата(Год + Месяц + День + Время) + (Цел(Сдвиг / 100) * 60 + (Сдвиг - Цел(Сдвиг / 100) * 100)) * 60;
	Исключение
		Дата = ТекущаяДата();
	КонецПопытки;
	Возврат Дата;
КонецФункции

Функция ЭтоЧисло(Знач Нумер, БольлшеНоля=Ложь)
	Если ПустаяСтрока(Нумер) Тогда Возврат Истина; КонецЕсли;
	Попытка
		Пробка = Число(Нумер);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат ?(БольлшеНоля, Пробка > 0, Истина);
КонецФункции

Функция ЧислоВыделить(Знач Слово)
	Ответ	= "";
	Если НЕ ПустаяСтрока(Слово) Тогда
		Слово	= СокрЛП(Слово);
		Если ЭтоЧисло(Прав(Слово, 1)) Тогда
			Для Итератор = 1 По СтрДлина(Слово) Цикл
				Если ЭтоЧисло(Прав(Слово, Итератор)) Тогда
					Ответ	= Прав(Слово, Итератор);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЭтоЧисло(Лев(Слово, 1)) Тогда
			Для Итератор = 1 По СтрДлина(Слово) Цикл
				Если ЭтоЧисло(Лев(Слово, Итератор)) Тогда
					Ответ	= Лев(Слово, Итератор);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Если СтрДлина(Слово) > 4 Тогда
				Слово	= Сред(Слово, 2, СтрДлина(Слово) - 2);
			Иначе
				Слово	= Сред(Слово, 2);
			КонецЕсли;
			Ответ	= ЧислоВыделить(Слово);
		КонецЕсли;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция Цензура(Знач Слово)
	Кондуит = Новый Массив;
	Кондуит.Добавить("&quot;");
	Для Каждого тЭлемент Из Кондуит Цикл
		Слово = СтрЗаменить(Слово, тЭлемент, "");
	КонецЦикла;
	Возврат СокрЛП(Слово);
КонецФункции

Функция БукваПравославная(Буква)
	Возврат (Найти("/", Буква) = 0);
КонецФункции

Функция НомерПолучить(Знач Слово)
	Слово = СокрЛП(СтрЗаменить(Слово, "/", " "));
	Пока Найти(Слово, " ") > 0 Цикл
		Слово = Сред(Слово, Найти(Слово, " ") + 1);
	КонецЦикла;
	Возврат Слово;
КонецФункции

Функция АвторНайти(Канал, Знач Слово="")
	Автор = Справочники.Авторы.ПустаяСсылка();
	Код = "";
	Если НЕ ПустаяСтрока(Слово) И Найти(Слово, "infostart.ru/profile") > 0 Тогда
		Слово = Сред(Слово, Найти(Слово, "infostart.ru/profile/") + 21);
		Для Итератор=1 По СтрДлина(Слово) Цикл
			Если БукваПравославная(Сред(Слово, Итератор, 1)) Тогда
				Код = Код + Сред(Слово, Итератор, 1);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПустаяСтрока(Код) И НЕ ПустаяСтрока(Слово) Тогда
		Автор = Справочники.Авторы.НайтиПоНаименованию(Слово, Истина, , Канал);
		Если Автор.Пустая() Тогда
			Объект = Справочники.Авторы.СоздатьЭлемент();
			Объект.Наименование	= Слово;
			Объект.Владелец		= Канал;
			Объект.Записать();
			
			Автор = Объект.Ссылка;
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(Код) Тогда
		Наименование = Канал.Наименование;
		Автор = Справочники.Авторы.НайтиПоНаименованию("", , , Канал);
		Если Автор.Пустая() Тогда
			Объект = Справочники.Авторы.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Объект, Канал, "Код,Наименование");
			Объект.Владелец		= Канал;
			Объект.Записать();
			
			Автор = Объект.Ссылка;
		ИначеЕсли Автор.Наименование <> Канал.Наименование Тогда
			
			Объект = Автор.ПолучитьОбъект();
			Объект.Наименование = Канал.Наименование;
			Объект.Записать();
		КонецЕсли;
	Иначе
		Автор = Справочники.Авторы.НайтиПоКоду(Код, , , Канал);
		Если Автор.Пустая() Тогда
			Наименование = Сред(Слово, СтрДлина(Код) + 4);
			Наименование = Лев(Наименование, Найти(Наименование, "<") - 1);
			Автор = Справочники.Авторы.НайтиПоНаименованию(Наименование, Истина, , Канал);
			Если Автор.Пустая() Тогда
				Объект = Справочники.Авторы.СоздатьЭлемент();
				Объект.Код			= Код;
				Объект.Наименование	= Наименование;
				Объект.Владелец		= Канал;
				Объект.Записать();
				
				Автор = Объект.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Автор;
КонецФункции

Функция ЭлементПрочитать(Элемент, Имя)
	Ответ = "";
	Ветка = Элемент.SelectSingleNode(Имя);
	Если Ветка <> Неопределено Тогда
		Ответ = СокрЛП(Ветка.Text);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция Причесать(Знач Текст, Принудительно=Ложь) Экспорт
	Если Принудительно Или Регламент.ФорматироватьТекст() Тогда
		Ризалт	= Новый ТекстовыйДокумент;
		Ризалт.УстановитьТипФайла(КодировкаТекста.UTF8);
		Виктим	= Новый ФорматированныйДокумент;
		Виктим.УстановитьHTML(Текст, Новый Структура);
		Для Каждого тЭлемент Из Виктим.Элементы Цикл
			Если ТипЗнч(тЭлемент)=Тип("ПараграфФорматированногоДокумента") Тогда
				Для Каждого ТекЭлемент Из тЭлемент.Элементы Цикл
					Если ТипЗнч(ТекЭлемент)=Тип("КартинкаФорматированногоДокумента") Тогда

					ИначеЕсли ТипЗнч(ТекЭлемент)=Тип("ТекстФорматированногоДокумента") Тогда
						Если СтрНайти(НРег(СтрЗаменить(ТекЭлемент.Текст, " ", "")), "версиядляпечати") = 1 Тогда
							
						ИначеЕсли СтрДлина(СокрЛП(ТекЭлемент.Текст)) = 1
						И ПустаяСтрока(ТекЭлемент.НавигационнаяСсылка)
						Тогда
						
						Иначе
							Ризалт.ДобавитьСтроку(СокрЛП(ТекЭлемент.Текст));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Текст	= Ризалт.ПолучитьТекст();
	КонецЕсли;
	Возврат Текст;
КонецФункции

Функция Парсить(Текст, Канал)
	Если ПустаяСтрока(Текст) Тогда
		ЗаписьЖурналаРегистрации("Чтение RSS", УровеньЖурналаРегистрации.Ошибка, , , "Пустой текст XML");
		Возврат 0;
	КонецЕсли;

	Счетовод		= 0;
	ЗагружатьТекстыПубликаций	= Регламент.ЗагружатьТекстыПубликацийПриЗагрузке();
	Запрос			= Новый Запрос(
		"ВЫБРАТЬ
		|	Публикация.Ссылка КАК Документ,
		|	Публикация.Проведен КАК Проведен
		|ИЗ
		|	Документ.Публикация КАК Публикация
		|ГДЕ
		|	Публикация.Канал = &Канал
		|	И Публикация.Гиперссылка ПОДОБНО &Гиперссылка");
	Если Канал.Парсер = Перечисления.Парсеры.Инфостарт Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	Публикация.Ссылка КАК Документ,
		               |	Публикация.Проведен КАК Проведен
		               |ИЗ
		               |	Документ.Публикация КАК Публикация
		               |ГДЕ
		               |	Публикация.Номер = &Номер
		               |	И Публикация.Канал = &Канал";
	КонецЕсли;
	Запрос.УстановитьПараметр("Канал",	Канал);
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);
		
		ФрешСтеп = Новый Структура("Канал,Дата,Номер,Автор,Заголовок,Описание,ТекстСтатьи,Гиперссылка", Канал);
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если НРег(ЧтениеXML.Имя) = "channel" Тогда
					
				ИначеЕсли НРег(ЧтениеXML.Имя) = "item" Тогда
					ИмяУзла = "";
					Пока ЧтениеXML.Прочитать() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							ИмяУзла	= НРег(ЧтениеXML.Имя);

						ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
							Если ИмяУзла = "title" Тогда
								ФрешСтеп.Заголовок	= СокрЛП(ЧтениеXML.Значение);
							ИначеЕсли ИмяУзла = "link" Тогда
								ФрешСтеп.Гиперссылка	= СокрЛП(ЧтениеXML.Значение);
							ИначеЕсли ИмяУзла = "pubdate" Тогда
								ФрешСтеп.Дата	= ДатаПреобразовать(ЧтениеXML.Значение);
							ИначеЕсли ИмяУзла = "description" Тогда
								ФрешСтеп.Описание	= СокрЛП(ЧтениеXML.Значение);
							ИначеЕсли ИмяУзла = "author" Тогда
								ФрешСтеп.Автор	= СокрЛП(ЧтениеXML.Значение);
							Иначе
								ИмяУзла = "";
								Продолжить;
							КонецЕсли;
							
							Если НЕ ПустаяСтрока(ФрешСтеп.Заголовок)
							И ЗначениеЗаполнено(ФрешСтеп.Дата)
							И НЕ ПустаяСтрока(ФрешСтеп.Описание)
							И НЕ ПустаяСтрока(ФрешСтеп.Гиперссылка)
							Тогда
								РежимЗаписи			= РежимЗаписиДокумента.Запись;
								
								Если Канал.Парсер = Перечисления.Парсеры.Инфостарт Тогда
									ФрешСтеп.Номер = НомерПолучить(ФрешСтеп.Гиперссылка);
									
									Если ЭтоЧисло(ФрешСтеп.Номер, Истина) Тогда
										ФрешСтеп.Автор	= АвторНайти(Канал, ФрешСтеп.Описание);
										Если ФрешСтеп.Автор.ПометкаУдаления Тогда
											РежимЗаписи			= РежимЗаписиДокумента.Проведение;
										КонецЕсли;
									Иначе
										ФрешСтеп.Номер	= ЧислоВыделить(ФрешСтеп.Номер);
										ФрешСтеп.Автор	= Справочники.Авторы.ПустаяСсылка();
									КонецЕсли;
									
									Если ЗагружатьТекстыПубликаций И НЕ ПустаяСтрока(Канал.Гиперссылка) Тогда
										ФрешСтеп.ТекстСтатьи = СкачатьПоСсылке(Канал.Гиперссылка + ФрешСтеп.Номер + "/");
									Иначе
										ФрешСтеп.ТекстСтатьи = "";
									КонецЕсли;
									
									Запрос.УстановитьПараметр("Номер",	ФрешСтеп.Номер);
								Иначе
									
									Если НЕ ПустаяСтрока(ФрешСтеп.Автор) Тогда
										ФрешСтеп.Автор = АвторНайти(Канал, ФрешСтеп.Автор);
										Если ФрешСтеп.Автор.ПометкаУдаления Тогда
											РежимЗаписи			= РежимЗаписиДокумента.Проведение;
										КонецЕсли;
									КонецЕсли;
									
									Запрос.УстановитьПараметр("Гиперссылка",	ФрешСтеп.Гиперссылка);
								КонецЕсли;
								ПредЗапрос = Запрос.Выполнить();
								Если ПредЗапрос.Пустой() Тогда
									Документ = Документы.Публикация.СоздатьДокумент();
									Документ.Заполнить(ФрешСтеп);
									Счетовод	= Счетовод + ?(РежимЗаписи = РежимЗаписиДокумента.Проведение, 1, 0);
								Иначе
									Выборка = ПредЗапрос.Выбрать();
									Выборка.Следующий();
									Если Выборка.Проведен Тогда
										Продолжить;
									КонецЕсли;
									Документ = Выборка.Документ.ПолучитьОбъект();
									//Если НЕ ПустаяСтрока(Документ.ТекстСтатьи) Тогда
									//	Продолжить;
									//КонецЕсли;
									ЗаполнитьЗначенияСвойств(Документ, ФрешСтеп);
								КонецЕсли;
								
								Попытка
									Документ.Записать(РежимЗаписи);
								Исключение
									ЗаписьЖурналаРегистрации("Сохранение " + Строка(Документ), УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Публикация, , ОписаниеОшибки());
								КонецПопытки;
								
								ФрешСтеп = Новый Структура("Канал,Дата,Номер,Автор,Заголовок,Описание,ТекстСтатьи,Гиперссылка", Канал);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ЧтениеXML.Закрыть();
	Исключение
		ЗаписьЖурналаРегистрации("Чтение RSS", УровеньЖурналаРегистрации.Ошибка, , Текст, ОписаниеОшибки());
	КонецПопытки;
		
	Если Регламент.ВестиПротоколЗагрузки() Тогда
		Запись = РегистрыСведений.Загрузки.СоздатьМенеджерЗаписи();
		Запись.Период		= ТекущаяДата();
		Запись.Канал		= Канал;
		Если Регламент.ВестиПротоколЗагрузкиПодробно() Тогда
			Запись.Комментарий	= Текст;
		КонецЕсли;
		Попытка
			Запись.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Сохранение " + Строка(Документ), УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.Загрузки, , ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Возврат Счетовод;
КонецФункции

Функция СкачатьПоСсылке(Гиперссылка) Экспорт
	Ответ = "";
	Если НЕ ПустаяСтрока(Гиперссылка) Тогда
		Попытка
			СтруктураURI = СтруктураURI(Гиперссылка);
			HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,,,, Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Новый СертификатыУдостоверяющихЦентровОС())); 
			HTTPRequest = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Новый Соответствие);
			Запрос = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPRequest);
			Ответ = Запрос.ПолучитьТелоКакСтроку();
		Исключение
			ЗаписьЖурналаРегистрации("Загрузка RSS", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегламентныеЗадания.ЗагрузкаRSS, , ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ТолькоЦифрыВСтроке(Знач Значение) Экспорт
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	ИначеЕсли СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат (СтрРазделить(Значение, "1234567890").Количество() = 0);
КонецФункции

Функция СтруктураURI(Знач Гиперссылка) Экспорт
	Результат = Новый Структура;
	
	Гиперссылка = СокрЛП(Гиперссылка);
	
	// схема
	Позиция = СтрНайти(Гиперссылка, "://");
	Если Позиция > 0 Тогда
		Результат.Вставить("Схема", НРег(Лев(Гиперссылка, Позиция - 1)));
		Гиперссылка = Сред(Гиперссылка, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = Гиперссылка;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	//// логин и пароль
	//Логин = СтрокаАвторизации;
	//Пароль = "";
	//Позиция = СтрНайти(СтрокаАвторизации, ":");
	//Если Позиция > 0 Тогда
	//	Логин = Лев(СтрокаАвторизации, Позиция - 1);
	//	Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	//	Результат.Вставить("Логин", Логин);
	//	Результат.Вставить("Пароль", Пароль);
	//КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
КонецФункции

Функция ЗагрузитьRSS(Знач Канал=Неопределено, Принудительно=Ложь) Экспорт
	Ответ = 0;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Каналы.Ссылка КАК Канал,
		|	Каналы.Гиперссылка КАК Гиперссылка,
		|	ЕСТЬNULL(ВложенныйЗапрос.Период, &Период) КАК Период,
		|	ВЫБОР
		|		КОГДА Каналы.Ссылка.ПериодОбновления = 0
		|			ТОГДА 60
		|		ИНАЧЕ Каналы.Ссылка.ПериодОбновления * 60
		|	КОНЕЦ КАК ПериодОбновления
		|ИЗ
		|	Справочник.Каналы.Гиперссылки КАК Каналы
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Каналы.Ссылка КАК Канал,
		|			МАКСИМУМ(ВложенныйЗапрос.Период) КАК Период
		|		ИЗ
		|			Справочник.Каналы КАК Каналы
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Загрузки.Канал КАК Канал,
		|					МАКСИМУМ(ЕСТЬNULL(Загрузки.Период, &Период)) КАК Период
		|				ИЗ
		|					РегистрСведений.Загрузки КАК Загрузки
		|				ГДЕ
		|					Загрузки.Канал = &Канал
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Загрузки.Канал
		|				
		|				ОБЪЕДИНИТЬ ВСЕ
		|				
		|				ВЫБРАТЬ
		|					Публикация.Канал,
		|					МАКСИМУМ(ЕСТЬNULL(Публикация.Дата, &Период))
		|				ИЗ
		|					Документ.Публикация КАК Публикация
		|				ГДЕ
		|					Публикация.Канал = &Канал
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Публикация.Канал) КАК ВложенныйЗапрос
		|				ПО Каналы.Ссылка = ВложенныйЗапрос.Канал
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Каналы.Ссылка
		|		
		|		ИМЕЮЩИЕ
		|			МАКСИМУМ(ВложенныйЗапрос.Период) < &Предел) КАК ВложенныйЗапрос
		|		ПО Каналы.Ссылка = ВложенныйЗапрос.Канал
		|ГДЕ
		|	Каналы.Заблокировано = ЛОЖЬ
		|	И Каналы.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ");
	Если Принудительно Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Каналы.Ссылка КАК Канал,
			|	Каналы.Гиперссылка КАК Гиперссылка,
			|	&Период КАК Период,
			|	0 КАК ПериодОбновления
			|ИЗ
			|	Справочник.Каналы.Гиперссылки КАК Каналы
			|ГДЕ
			|	Каналы.Ссылка = &Канал
			|	И Каналы.Заблокировано = ЛОЖЬ";
	КонецЕсли;
	Запрос.УстановитьПараметр("Канал",	Канал);
	Запрос.УстановитьПараметр("Период",	ДобавитьМесяц(ТекущаяДата(), -1));
	Запрос.УстановитьПараметр("Предел",	ТекущаяДата() - 60);				// минимальный период между обновлениями
	Если ПустаяСтрока(Канал) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Каналы.Ссылка = &Канал", "Каналы.Ссылка.ПометкаУдаления = ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Канал = &Канал", "Канал.ПометкаУдаления = ЛОЖЬ");
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТекущаяДата() - Выборка.Период > Выборка.ПериодОбновления Тогда
			Текст = СкачатьПоСсылке(Выборка.Гиперссылка);
			Вольта = Парсить(Текст, Выборка.Канал);
			
			Ответ = Ответ + Вольта;
		КонецЕсли;
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция АдресИнформацииОКонфигурации() Экспорт
	Возврат Метаданные.АдресИнформацииОКонфигурации;
КонецФункции

Функция ГиперссылкаПолучить(Знач Гиперссылка) Экспорт
	Если ТипЗнч(Гиперссылка) = Тип("ДокументСсылка.Публикация") Тогда
		Возврат Гиперссылка.Гиперссылка;
	ИначеЕсли ТипЗнч(Гиперссылка) = Тип("СправочникСсылка.Авторы") Тогда
		Возврат ?(ПустаяСтрока(Гиперссылка.Код), "", "https://infostart.ru/profile/" + Гиперссылка.Код + "/");
	КонецЕсли;
	Возврат "";
КонецФункции
